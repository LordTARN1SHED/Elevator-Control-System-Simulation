;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   周三 九月 13 2023
; Processor: AT89C51
; Compiler:  ASEM-51 (Proteus)
;====================================================================

$NOMOD51
$INCLUDE (8051.MCU)

;====================================================================
; DEFINITIONS
;====================================================================
SHCP EQU P3.0 ;移位输入时钟
STCP EQU P3.2 ;写入时钟
DATAS EQU P3.1 ;数据线
;====================================================================
; VARIABLES
;====================================================================

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================


      ; Reset Vector
      org   0000h
      jmp   Start
      org   000Bh
      JMP   LABEL1
      ; 假设使用一个汇编器，如Keil，我们可以这样定义变量
      FLOOR1    DATA    30H
      FLOOR2    DATA    31H
      FLOOR3    DATA    32H
      FLOOR4    DATA    33H
      UP1    DATA    34H   ;00H
      DOWN1    DATA    35H ;01H
      UP2    DATA    36H   ;02H
      DOWN2    DATA    37H ;03H
      UP3    DATA    38H   ;04H
      DOWN3    DATA    39H ;05H
      UP4    DATA    40H   ;06H
      DOWN4    DATA    41H ;07H
      R6S    DATA    42H
      ACTION    DATA    43H;0停1上2下
      DOOR    DATA    44H;0关 1开
      CURRENTFLOOR    DATA    45H
      STEP    DATA    46H
      DISNUM    DATA    47H
      TIMECOUNTER1    DATA    48H
      TIMECOUNTER2    DATA    49H
      DOORCOUNTER1    DATA    50H
      DOORCOUNTER2    DATA    51H
      CF1    DATA    52H
      CF2    DATA    53H
      CF3    DATA    54H
      CF4    DATA    55H
      X    DATA    56H
      MOTORCOUNTER1    DATA    57H
      MOTORCOUNTER2    DATA    58H
      LED    DATA    59H
      RETURNCOUNTER1    DATA    60H
      RETURNCOUNTER2    DATA    61H
      PREACTION    DATA    62H
      Y    DATA    63H


;====================================================================
; CODE SEGMENT
;====================================================================

      org   0100h
Start:	
      ; Write your code here
      
      ;设置中断允许寄存器IE
      
      ;MOV DPTR, #08AH
      ;MOV A, #82H
      ;MOVX @DPTR, A
      SETB EA
      ;MOV ES, #0H
      ;MOV ET1, #0H
      ;MOV EX1 ,#0H
      SETB ET0 
      ;MOV EX0, #0H
      
      ;设置TMOD TCON
      MOV TMOD, #02H
      ;MOV TCON, #10H
      
      ;设置T0计数器初值
      MOV TH0, #00H
      
      ;开始计数
      SETB TR0
      
      
      
      MOV R1,#10H
      MOV R2,#10H
      MOV R3,#10H
      MOV R4,#10H
      MOV R5,#0H
      MOV A,#01H
      MOV FLOOR1,A
      MOV FLOOR2,A
      MOV FLOOR3,A
      MOV FLOOR4,A
      
      MOV UP1,A
      MOV DOWN1,A
      MOV UP2,A
      MOV DOWN2,A
      MOV UP3,A
      MOV DOWN3,A
      MOV UP4,A
      MOV DOWN4,A
      MOV UP1,A
      MOV CURRENTFLOOR,A
      MOV LED,A

      MOV A,#00H
      MOV DOOR,A
      MOV ACTION,A
      MOV CF1,A
      MOV CF2,A
      MOV CF3,A
      MOV CF4,A
      
LOOP:	
    MOV P0, #11111110B
    MOV A, P0
    CPL A
    ANL A, #11111110B
    MOV R0,#0H
    JNZ XPOS;无按键继续查
    
    MOV P0, #11111101B
    MOV A, P0
    CPL A
    ANL A, #11111101B
    MOV R0,#4H
    JNZ XPOS;无按键继续查
    
    MOV P0, #11111011B
    MOV A, P0
    CPL A
    ANL A, #11111011B
    MOV R0,#8H
    JNZ XPOS;无按键继续查
    
    MOV P0, #11110111B
    MOV A, P0
    CPL A
    ANL A, #11110111B
    MOV R0,#0CH
    JNZ XPOS;无按键继续查
    
    CALL CHECKLED
    MOV A,LED
    JZ JFINISH
    JMP LOOP;继续查
JFINISH:
    
    JMP FINISH
XPOS:
    CALL DELAY
    CALL DELAY
    CJNE A,#00010000B,BUT2
    JMP ADDCONTENT
BUT2:
    CJNE A,#00100000B,BUT3
    INC R0
    JMP ADDCONTENT
BUT3:
    CJNE A,#01000000B,BUT4
    INC R0
    INC R0
    JMP ADDCONTENT
BUT4:
    CJNE A,#10000000B,LOOP
    INC R0
    INC R0
    INC R0
    JMP ADDCONTENT
    
ADDCONTENT:;改成储存哪些键按下
    CALL KEYUP
    CALL CLEARRETURN
    MOV A,R0
    CLR EA
C0:
    JZ D0
    JMP C1
D0:
    MOV FLOOR1,#00H
    JMP FINISH
    
C1:
    CLR C
    SUBB A,#01H
    JZ D1
    JMP C2
D1:
    MOV FLOOR2,#00H
    JMP FINISH
    
C2:
    CLR C
    SUBB A,#01H
    JZ D2
    JMP C3
D2:
    MOV FLOOR3,#00H
    JMP FINISH
    
C3:
    CLR C
    SUBB A,#01H
    JZ D3
    JMP C4
D3:
    MOV FLOOR4,#00H
    JMP FINISH
    
C4:
    CLR C
    SUBB A,#01H
    JZ D4
    JMP C5
D4:
    MOV DOWN1,#00H
    JMP FINISH

C5:
    CLR C
    SUBB A,#01H
    JZ D5
    JMP C6
D5:
    MOV DOWN2,#00H
    JMP FINISH 

C6:
    CLR C
    SUBB A,#01H
    JZ D6
    JMP C7
D6:
    MOV DOWN3,#00H
    JMP FINISH 
    
C7:
    CLR C
    SUBB A,#01H
    JZ D7
    JMP C8
D7:
    MOV DOWN4,#00H
    JMP FINISH 
    
C8:
    CLR C
    SUBB A,#01H
    JZ D8
    JMP C9
D8:
    MOV UP1,#00H
    JMP FINISH
    
C9:
    CLR C
    SUBB A,#01H
    JZ D9
    JMP C10
D9:
    MOV UP2,#00H
    JMP FINISH 
    
C10:
    CLR C
    SUBB A,#01H
    JZ D10
    JMP C11
D10:
    MOV UP3,#00H
    JMP FINISH
    
C11:
    CLR C
    SUBB A,#01H
    JZ D11
    JMP C12
D11:
    MOV UP4,#00H
    JMP FINISH
    
C12:
    CLR C
    SUBB A,#01H
    JZ D12
    JMP C13
D12:
    ;CALL DECFLOOR
    MOV A,DOOR
    JNZ FINISH
    MOV A,CURRENTFLOOR
    CLR C
    SUBB A,#01H
    JZ FINISH
    MOV A,#02H
    MOV ACTION,A
    MOV PREACTION,A
    JMP FINISH
    
C13:
    CLR C
    SUBB A,#01H
    JZ D13
    JMP C14
D13:
    ;CALL ADDFLOOR
    MOV A,DOOR
    JNZ FINISH
    MOV A,CURRENTFLOOR
    CLR C
    SUBB A,#04H
    JZ FINISH
    MOV A,#01H
    MOV ACTION,A
    MOV PREACTION,A
    JMP FINISH
    
C14:
    CLR C
    SUBB A,#01H
    JZ D14
    JMP C15
D14:
    CALL OPENDOOR
    JMP FINISH
    
C15:
    CLR C
    SUBB A,#01H
    JZ D15
    JMP FINISH
D15:
    CALL CLOSEDOOR
    JMP FINISH

FINISH:
    SETB EA
    MOV A,ACTION
    JNZ JLOOP
    CALL CHECKARRIVE
JLOOP:
    JMP LOOP

    
ADDFLOOR:
   CLR C
   MOV A,CURRENTFLOOR
   ADD A,#01H
   SUBB A,#05H
   JNC NOADD
   MOV A,CURRENTFLOOR
   ADD A,#01H
   MOV CURRENTFLOOR,A
NOADD:
   RET

DECFLOOR:    
   CLR C
   MOV A,CURRENTFLOOR
   SUBB A,#01H
   JZ NOSUB
   MOV CURRENTFLOOR,A
NOSUB:
   RET
   
   
OPENDOOR:
   PUSH ACC
   MOV A,CURRENTFLOOR
   CLR C
   SUBB A,#01H
   JZ OPENF1
   SUBB A,#01H
   JZ OPENF2
   SUBB A,#01H
   JZ OPENF3
   SUBB A,#01H
   JZ OPENF4

OPENF1:
   MOV FLOOR1,A
   JMP OPENOVER
OPENF2:
   MOV FLOOR2,A
   JMP OPENOVER
OPENF3:
   MOV FLOOR3,A
   JMP OPENOVER
OPENF4:
   MOV FLOOR4,A
   JMP OPENOVER
OPENOVER:
   MOV A,ACTION
   JNZ DOP
   MOV A,#01H
   MOV DOOR,A

DOP:   
   POP ACC
   RET


CLOSEDOOR:
   PUSH ACC
   MOV A,#00H
   MOV DOOR,A
   ;CALL CHECKGOTO
   MOV A,CURRENTFLOOR
   CLR C
   SUBB A,#01H
   JZ CLOSE1
   SUBB A,#01H
   JZ CLOSE2
   SUBB A,#01H
   JZ CLOSE3
   SUBB A,#01H
   JZ CLOSE4
   
CLOSE1:
   MOV A,#01H
   MOV FLOOR1,A
   MOV UP1,A
   MOV DOWN1,A

   JMP CLOSEOVER
CLOSE2:
   MOV A,#01H
   MOV FLOOR2,A
   MOV UP2,A
   MOV DOWN2,A

   JMP CLOSEOVER
CLOSE3:
   MOV A,#01H
   MOV FLOOR3,A
   MOV UP3,A
   MOV DOWN3,A

   JMP CLOSEOVER
CLOSE4:
   MOV A,#01H
   MOV FLOOR4,A
   MOV UP4,A
   MOV DOWN4,A
   
CLOSEOVER:
   POP ACC
   RET
   
KEYUP:
    MOV A, P0
    CPL A
    ANL A,#0F0H
    JNZ KEYUP;不为零则未松，回去
    RET
    

DELAY:
   ;CLR EA
   PUSH ACC
   MOV A,R6 
   PUSH ACC
   MOV A,R7
   PUSH ACC

   MOV R6, #0FFH
DELAY_1:
   MOV R7, #0FFH
   DJNZ R7, $
   DJNZ R6, DELAY_1
   
   POP ACC
   MOV R7,A
   POP ACC
   MOV R6,A
   POP ACC
   ;SETB EA
   RET

CLEARRETURN:
   PUSH ACC
   MOV A,#00H
   MOV RETURNCOUNTER1,A
   MOV RETURNCOUNTER2,A
   POP ACC
   RET
   
SHOWLED:
   PUSH ACC
   MOV A,FLOOR1
   RL A
   ORL A,FLOOR2
   RL A
   ORL A,FLOOR3
   RL A
   ORL A,FLOOR4
   RL A
   ;CALL CACULATEFLAG1
   ;ORL A,FLAG1
   RL A
   RL A
   RL A
   MOV P3,A
   
   CLR A
   MOV A,UP1
   RL A
   ORL A,DOWN1
   RL A
   ORL A,UP2
   RL A
   ORL A,DOWN2
   RL A
   ORL A,UP3
   RL A
   ORL A,DOWN3
   RL A
   ORL A,UP4
   RL A
   ORL A,DOWN4
   CALL WRITE_BYTE

   POP ACC
   RET

WRITE_BYTE:;将a中送入为行数据，仅8个！
    MOV R6S, #8
NEXT:
    RLC A
    CLR SHCP
    MOV DATAS, C
    SETB SHCP
    DJNZ R6S, NEXT
    CLR STCP
    NOP
    SETB STCP
    RET
   
   
MOTOR:
   PUSH ACC
   MOV A,ACTION
   JZ STOP
   CLR C
   SUBB A,#01H
   JZ CLOCKWISE
ANTICLOCKWISE:
   MOV A,STEP
   MOV DPTR,#TABLE4
   MOVC A,@A+DPTR

   ORL A,DISNUM
   MOV P1,A
   ;CALL DELAY
   
   MOV A,MOTORCOUNTER2
   JZ ADDSTEP
   JMP ENDAD
ADDSTEP:
   MOV A,STEP
   CLR C
   SUBB A,#01H
   JC AD8
   MOV STEP,A
   POP ACC
   RET
AD8:
   MOV A,#07H
   MOV STEP,A
ENDAD:
   POP ACC
   RET
   
CLOCKWISE:
   MOV A,STEP
   MOV DPTR,#TABLE4
   MOVC A,@A+DPTR

   ORL A,DISNUM
   MOV P1,A
   ;CALL DELAY
   
   MOV A,MOTORCOUNTER2
   JZ DECSTEP
   JMP ENDSB
   
DECSTEP:
   MOV A,STEP
   CLR C
   ADD A,#01H
   SUBB A,#08H
   JC NSB8
   MOV STEP,A
   POP ACC
   RET
NSB8:
   MOV A,STEP
   ADD A,#01H
   MOV STEP,A
ENDSB:
   POP ACC
   RET
   
STOP:
   MOV A,#0H
   ORL A,DISNUM
   MOV P1,A
   POP ACC
   RET

   
CHECKLED:
   PUSH ACC
   
   MOV A,FLOOR1
   ANL A,FLOOR2
   ANL A,FLOOR3
   ANL A,FLOOR4
   ANL A,UP1
   ANL A,UP2
   ANL A,UP3
   ANL A,UP4
   ANL A,DOWN1
   ANL A,DOWN2
   ANL A,DOWN3
   ANL A,DOWN4
   
   MOV LED,A
   
   POP ACC
   RET
   
   
CHECKFLOOR:
   PUSH ACC
CHECKF1:
   MOV A,FLOOR1
   ANL A,UP1
   ANL A,DOWN1
   JNZ NOF1
   MOV A,#01H
   MOV CF1,A
   JMP CHECKF2
NOF1:
   MOV A,#00H
   MOV CF1,A
CHECKF2:   
   MOV A,FLOOR2
   ANL A,UP2
   ANL A,DOWN2
   JNZ NOF2
   MOV A,#02H
   MOV CF2,A
   JMP CHECKF3
NOF2:
   MOV A,#00H
   MOV CF2,A
CHECKF3:   
   MOV A,FLOOR3
   ANL A,UP3
   ANL A,DOWN3
   JNZ NOF3
   MOV A,#03H
   MOV CF3,A
   JMP CHECKF4
NOF3:
   MOV A,#00H
   MOV CF3,A
   
CHECKF4:   
   MOV A,FLOOR4
   ANL A,UP4
   ANL A,DOWN4
   JNZ NOF4
   MOV A,#04H
   MOV CF4,A
   JMP CHECKFOVER
NOF4:
   MOV A,#00H
   MOV CF4,A
CHECKFOVER:   
   POP ACC
   RET


CHECKARRIVE:
   PUSH ACC
   MOV A,#00H
   MOV ACTION,A
   ;MOV STEP,A
   CALL CHECKFLOOR
   MOV A,CURRENTFLOOR
   CLR C
   SUBB A,CF1
   JZ YES
   MOV A,CURRENTFLOOR
   CLR C
   SUBB A,CF2
   JZ YES
   MOV A,CURRENTFLOOR
   CLR C
   SUBB A,CF3
   JZ YES
   MOV A,CURRENTFLOOR
   CLR C
   SUBB A,CF4
   JZ YES
NO:
   CALL CLOSEDOOR
   JMP CHECKGOTO
   
YES:
   CALL OPENDOOR
   
CHECKGOTO:
   MOV A,ACTION
   JZ GO
   JMP GODONE
GO:
   MOV A,#02H
   MOV Y,A
   MOV A,PREACTION
   CLR C
   SUBB A,#01H
   JNZ GO1
   JMP GO2
GO1:
   MOV A,CURRENTFLOOR
   CLR C
   SUBB A,#01H
   JZ GO3
   MOV X,A
   MOV A,CF1
   CLR C
   SUBB A,X
   JZ GODOWN1
   MOV A,CF2
   CLR C
   SUBB A,X
   JZ GODOWN1
   MOV A,CF3
   CLR C
   SUBB A,X
   JZ GODOWN1
   MOV A,CF4
   CLR C
   SUBB A,X
   JZ GODOWN1
   JMP GO3
GODOWN1:
   JMP GODOWN
GO3:   
   MOV A,CURRENTFLOOR
   CLR C
   SUBB A,#02H
   JC GO5
   JZ GO5
   MOV X,A
   MOV A,CF1
   CLR C
   SUBB A,X
   JZ GODOWN3
   MOV A,CF2
   CLR C
   SUBB A,X
   JZ GODOWN3
   MOV A,CF3
   CLR C
   SUBB A,X
   JZ GODOWN3
   MOV A,CF4
   CLR C
   SUBB A,X
   JZ GODOWN3
   JMP GO5
GODOWN3:
   JMP GODOWN
GO5:   
   MOV A,CURRENTFLOOR
   CLR C
   SUBB A,#03H
   JC GO7
   JZ GO7
   MOV X,A
   MOV A,CF1
   CLR C
   SUBB A,X
   JZ GODOWN5
   MOV A,CF2
   CLR C
   SUBB A,X
   JZ GODOWN5
   MOV A,CF3
   CLR C
   SUBB A,X
   JZ GODOWN5
   MOV A,CF4
   CLR C
   SUBB A,X
   JZ GODOWN5
   JMP GO7
GODOWN5:
   JMP GODOWN
GO7:
   ;CALL CHECKLED
   MOV A,Y
   CLR C
   SUBB A,#01H
   MOV Y,A
   JNZ GO2
   JMP GOSTOP
   
GO2:   
   MOV A,CURRENTFLOOR
   CLR C
   ADD A,#01H
   MOV X,A
   MOV A,CF1
   CLR C
   SUBB A,X
   JZ GOUP2
   MOV A,CF2
   CLR C
   SUBB A,X
   JZ GOUP2
   MOV A,CF3
   CLR C
   SUBB A,X
   JZ GOUP2
   MOV A,CF4
   CLR C
   SUBB A,X
   JZ GOUP2
   JMP GO4
GOUP2:
   JMP GOUP
GO4:   
   MOV A,CURRENTFLOOR
   CLR C
   ADD A,#02H
   MOV X,A
   MOV A,CF1
   CLR C
   SUBB A,X
   JZ GOUP4
   MOV A,CF2
   CLR C
   SUBB A,X
   JZ GOUP4
   MOV A,CF3
   CLR C
   SUBB A,X
   JZ GOUP4
   MOV A,CF4
   CLR C
   SUBB A,X
   JZ GOUP4
   JMP GO6
GOUP4:
   JMP GOUP
GO6:   
   MOV A,CURRENTFLOOR
   CLR C
   ADD A,#03H
   MOV X,A
   MOV A,CF1
   CLR C
   SUBB A,X
   JZ GOUP6
   MOV A,CF2
   CLR C
   SUBB A,X
   JZ GOUP6
   MOV A,CF3
   CLR C
   SUBB A,X
   JZ GOUP6
   MOV A,CF4
   CLR C
   SUBB A,X
   JZ GOUP6
   JMP GO8
GOUP6:
   JMP GOUP
GO8:
   ;CALL CHECKLED
   MOV A,Y
   CLR C
   SUBB A,#01H
   MOV Y,A
   JZ GOSTOP
   JMP GO1
   
GOSTOP:
   MOV A,#00H
   MOV ACTION,A
   ;MOV STEP,A
   JMP GODONE
GODOWN:
   ;SETB EA
   MOV A,DOOR
   JNZ GOSTOP
   MOV A,#02H
   MOV ACTION,A
   MOV PREACTION,A
   JMP GODONE
GOUP:
   ;SETB EA
   MOV A,DOOR
   JNZ GOSTOP
   MOV A,#01H
   MOV ACTION,A
   MOV PREACTION,A
  
GODONE:
   ;CLR EA   
   POP ACC
   RET
   

   

;中断处理程序
LABEL1:
      CLR EA
      PUSH ACC
      CALL SHOWLED
      ;CALL CHECKARRIVE
IMODE:     ;输入模式
      MOV A, R5
      CLR C
      SUBB A, #1H
      JC DISPLAY0
      MOV A, R5
      CLR C
      SUBB A, #2H
      JC DISPLAY1
      MOV A, R5
      CLR C
      SUBB A, #3H
      JC DISPLAY2
      JMP DISPLAY3   
DISPLAY0:
      MOV A,#00000111B     
      MOV DISNUM,A
      CALL MOTOR
      MOV A,ACTION
      MOV DPTR,#TABLE1
      MOVC A,@A+DPTR
      MOV P2,A
      INC R5
      JMP NEXT1
DISPLAY1:
      MOV A,#00001011B
      MOV DISNUM,A
      CALL MOTOR
      MOV A,CURRENTFLOOR
      MOV DPTR,#TABLE
      MOVC A,@A+DPTR
      MOV P2,A
      INC R5
      JMP NEXT1
DISPLAY2:
      MOV A,#00001101B
      MOV DISNUM,A
      CALL MOTOR
      MOV A,DOOR
      MOV DPTR,#TABLE3
      MOVC A,@A+DPTR
      MOV P2,A
      INC R5
      JMP NEXT1
DISPLAY3:
      MOV A,#00001110B
      MOV DISNUM,A
      CALL MOTOR
      MOV A,DOOR
      MOV DPTR,#TABLE2
      MOVC A,@A+DPTR
      MOV P2,A
      MOV R5,#0H      
      
NEXT1:
      MOV A,ACTION
      JZ NEXT2
      
      ;外循环
      MOV A,TIMECOUNTER1
      ADD A,#01H
      CLR C
      SUBB A,#40H
      JC NOTOVERFLOW1     
      
      ;内循环
      MOV A,TIMECOUNTER2
      CLR C
      ADD A,#01H
      JNC NOTOVERFLOW2
      ;MOV A #00H
      ;MOV TIMECOUNTER,A
      MOV A,ACTION
      CLR C
      SUBB A,#02H
      JC UPOVER
DOWNOVER:
      CALL DECFLOOR
      JMP LATER
UPOVER:
      CALL ADDFLOOR
LATER:
      CALL CHECKARRIVE
      ;MOV A,#00H
      ;MOV ACTION,A
      ;CALL OPENDOOR  
      
NOTOVERFLOW2:
      MOV TIMECOUNTER2,A  
      MOV A,#0H
      MOV TIMECOUNTER1,A
      JMP OVER
      ;内循环结束
      
NOTOVERFLOW1:
      MOV A,TIMECOUNTER1
      ADD A,#01H
      MOV TIMECOUNTER1,A
      JMP OVER
      ;外循环结束
      
NEXT2:

      MOV A,DOOR
      JZ OVER
      
      ;外循环
      MOV A,DOORCOUNTER1
      ADD A,#01H
      CLR C
      SUBB A,#40H
      JC DOORNOTOVERFLOW1    
      
      ;内循环
      MOV A,DOORCOUNTER2
      CLR C
      ADD A,#01H
      JNC DOORNOTOVERFLOW2
      
      CALL CLOSEDOOR
      ;CALL CHECKGOTO
      
    
DOORNOTOVERFLOW2:
      MOV DOORCOUNTER2,A
      MOV A,#0H
      MOV DOORCOUNTER1,A
      JMP OVER
      ;内循环结束
      
DOORNOTOVERFLOW1:
      MOV A,DOORCOUNTER1
      ADD A,#01H
      MOV DOORCOUNTER1,A
      ;外循环结束
      
OVER:
      ;外循环
      MOV A,MOTORCOUNTER1
      ADD A,#01H
      CLR C
      SUBB A,#02H
      JC MOTORNOTOVERFLOW1    
      
      ;内循环
      MOV A,MOTORCOUNTER2
      CLR C
      ADD A,#01H
      JNC MOTORNOTOVERFLOW2
      
    
MOTORNOTOVERFLOW2:
      MOV MOTORCOUNTER2,A
      MOV A,#0H
      MOV MOTORCOUNTER1,A
      JMP OVER1
      ;内循环结束
      
MOTORNOTOVERFLOW1:
      MOV A,MOTORCOUNTER1
      ADD A,#01H
      MOV MOTORCOUNTER1,A
      ;外循环结束
      
OVER1:
      ;外循环
      MOV A,RETURNCOUNTER1
      ADD A,#01H
      CLR C
      SUBB A,#0FFH
      JC RETURNNOTOVERFLOW1    
      
      ;内循环
      MOV A,RETURNCOUNTER2
      CLR C
      ADD A,#01H
      JNC RETURNNOTOVERFLOW2
      
      MOV A,#00H
      MOV FLOOR1,A
      
RETURNNOTOVERFLOW2:
      MOV RETURNCOUNTER2,A
      MOV A,#0H
      MOV RETURNCOUNTER1,A
      JMP OVER2
      ;内循环结束
      
RETURNNOTOVERFLOW1:
      MOV A,RETURNCOUNTER1
      ADD A,#01H
      MOV RETURNCOUNTER1,A
      ;外循环结束
OVER2:
      POP ACC
      SETB EA
      RETI

   
TABLE:
   ;   0    1    2    3    4    5    6    7    8    9    A    b    C    d    e    f  NULL
   DB 3fH, 06H, 5bH, 4fH, 66H, 6dH, 7dH, 07H, 7fH, 6fH, 77H, 7cH, 39H, 5eH, 79H, 71H, 00H 
   
TABLE1:
   ;   停   上   下
   DB 40H, 23H, 1CH
   
TABLE2:;左侧门
   ;   关   开 
   DB 0fH, 39H
TABLE3:;右侧们
   ;   关   开
   DB 39H, 0fH
   
TABLE4:;步进电机
   ;   0    1    2    3    4    5    6    7    
   DB 010H, 030H, 020H, 060H, 040H, 0C0H, 080H, 090H
;====================================================================
      END
